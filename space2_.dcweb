#!/bin/ksh

# This ugly script removes the following characters from all files
# and directories under $1 :
#
#              ` " ' ) $ ] ! # ; | * ^
#
#
# In addition, the following substitutions are made: 
#
#          this:	is converted to:
#
#          space	 	 _
#          ( 			_-_
#          [ 			_-_
#          & 			_and_
#
# This takes a file named something like:
#
# (Elton John) - Benny & the Jets.mp3
#
# and turns it into:
#
# Elton_John_-_Benny_and_the_Jets.mp3
#
# Octal char map included for reference:
#
#000 NUL  001 SOH  002 STX  003 ETX  004 EOT  005 ENQ  006 ACK  007 BEL
#010 BS   011 HT   012 NL   013 VT   014 NP   015 CR   016 SO   017 SI
#020 DLE  021 DC1  022 DC2  023 DC3  024 DC4  025 NAK  026 SYN  027 ETB
#030 CAN  031 EM   032 SUB  033 ESC  034 FS   035 GS   036 RS   037 US
#040 SP   041 !    042 "    043 #    044 $    045 %    046 &    047 '
#050 (    051 )    052 *    053 +    054 ,    055 -    056 .    057 /
#060 0    061 1    062 2    063 3    064 4    065 5    066 6    067 7
#070 8    071 9    072 :    073 ;    074 <    075 =    076 >    077 ?
#100 @    101 A    102 B    103 C    104 D    105 E    106 F    107 G
#110 H    111 I    112 J    113 K    114 L    115 M    116 N    117 O
#120 P    121 Q    122 R    123 S    124 T    125 U    126 V    127 W
#130 X    131 Y    132 Z    133 [    134 \    135 ]    136 ^    137 _
#140 `    141 a    142 b    143 c    144 d    145 e    146 f    147 g
#150 h    151 i    152 j    153 k    154 l    155 m    156 n    157 o
#160 p    161 q    162 r    163 s    164 t    165 u    166 v    167 w
#170 x    171 y    172 z    173 {    174 |    175 }    176 ~    177 DEL
#
#
# (man ascii)
#
#
sterilize_dirs () {
REPLAY=0
find * -type d -print |while read I
do
NEWD=`echo "${I}"|tr ' ' '_'|tr -d '\140'|tr -d '\042'|tr -d '\047'|tr '\050' '_-_'|tr -d '\051'|tr '\133' '_-_'|tr -d '\135'|tr -d '\041'|tr -d '\043'|tr -d '\073'|tr -d '\174'|tr -d '\044'|tr '\046' '_and_'|tr -d '\052'|tr -d '\136'`
  OLDD=`echo "${I}"`
  [[ "$NEWD" != "$OLDD" ]] && {
    mv "${OLDD}" ${NEWD} 2>/dev/null
    [[ $? -ne 0 ]] && {
      echo "The move of $OLDD to $NEWD failed. Logged to /tmp/space2_.out"
      echo "$OLDD" >> /tmp/space2_.out
      REPLAY=1
    }
      echo ".\c"
  }
done
}
sterilize_files () {
find . -type f -print|while read I
do
NEW=`echo "${I}"|tr ' ' '_'|tr -d '\140'|tr -d '\042'|tr -d '\047'|tr '\050' '_-_'|tr -d '\051'|tr '\133' '_-_'|tr -d '\135'|tr -d '\041'|tr -d '\043'|tr -d '\073'|tr -d '\174'|tr -d '\044'|tr '\046' '_and_'|tr -d '\052'|tr -d '\136'`
[[ "$NEW" != "$I" ]] && {
  mv "${I}" ${NEW} 2>/dev/null
  [[ $? -ne 0 ]] && {
    echo "The move of $I to $NEW failed.  Logged to /tmp/space2_.out"
    echo "$I" >> /tmp/space2_.out
  }
      echo ".\c"
}
done
}
> /tmp/space2_.out
if [ $# -ne 1 ] || [ ! -d "$1" ]
then
  echo "USAGE: $0 directory_name"
  more `which $0`
  exit 1
fi
if [ ! -d $1 ]
then
  echo "Can't find $1"
  exit 1
else
  cd $1
  if [ $? -ne 0 ]
  then
   echo "Can't cd to $1"
   exit 1
  fi
fi
echo "Working \c"

sterilize_dirs
while [ "$REPLAY" = "1" ]
do
  sterilize_dirs
done

sterilize_files
